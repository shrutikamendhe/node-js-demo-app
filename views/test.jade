doctype html
html
  head
    meta(name='viewport', content='initial-scale=1.0, user-scalable=no')
    meta(charset='utf-8')
    title Waypoints in directions
    style.
      #right-panel {
      font-family: 'Roboto','sans-serif';
      line-height: 30px;
      padding-left: 10px;
      }
      #right-panel select, #right-panel input {
      font-size: 15px;
      }
      #right-panel select {
      width: 100%;
      }
      #right-panel i {
      font-size: 12px;
      }
      html, body {
      height: 100%;
      margin: 0;
      padding: 0;
      }
      #map {
      height: 100%;
      float: left;
      width: 70%;
      height: 100%;
      }
      #right-panel {
      overflow-y: scroll;
      margin: 20px;
      border-width: 2px;
      width: 26%;
      height: 700px;
      float: left;
      text-align: left;
      padding-top: 0;
      }
      #directions-panel {
      margin-top: 10px;
      background-color: #FFEE77;
      padding: 10px;
      overflow: scroll;
      height: 174px;
      }
      .pac-container:after {0
      /* Disclaimer: not needed to show 'powered by Google' if also a Google Map is shown */
      background-image: none !important;
      height: 0px;
      }
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js')
  body
    #map
    #locationField
      input#autocomplete(placeholder='Enter your address', onfocus='geolocate()', type='text', autocomplete='off', style='padding: 5px;width: 300px;margin: 10px 0px 0px 30px;')
    #right-panel(style='height=90%')
    script.
      var geojson;
      var waypts = []
      var directionsService = ""
      var directionsDisplay = ""
      var map = "";
      var autocomplete = ""
      var latlongarray = []
      function initMap() {
      latlongarray = [
      new google.maps.LatLng(21.1458004, 79.08815460000005),
      new google.maps.LatLng(19.0759837, 72.87765590000004),
      new google.maps.LatLng(28.6618976, 77.22739580000007),
      new google.maps.LatLng(27.1766701, 78.00807450000002),
      new google.maps.LatLng(26.2182871, 78.18283079999992)
      ]
      directionsService = new google.maps.DirectionsService;
      directionsDisplay = new google.maps.DirectionsRenderer({ suppressMarkers: true });
      map = new google.maps.Map(document.getElementById('map'), {
      zoom: 6,
      center: { lat: 21.1458, lng: 79.0882 }
      });
      directionsDisplay.setMap(map);
      directionsDisplay.setPanel(document.getElementById('right-panel'));
      for (var i = 0 ; i < latlongarray.length - 1; i++) {
      apply_direction_service(latlongarray[i], latlongarray[i + 1]);
      display_marker(latlongarray[i], (i + 1))
      if (i == latlongarray.length - 2) {
      display_marker(latlongarray[i + 1], (i + 2))
      }
      }
      if (latlongarray.length > 2) {
      for (i = 1; i < latlongarray.length - 1; i++) {
      waypts.push({ location: latlongarray[i], stopover: true })
      }
      directionsService.route({
      origin: latlongarray[0],
      destination: latlongarray[latlongarray.length - 1],
      waypoints: waypts,
      optimizeWaypoints: true,
      travelMode: 'DRIVING'
      }, function (response, status) {
      if (status === 'OK') {
      console.log(response)
      directionsDisplay.setDirections(response);
      }
      //  console.log(response, status)
      });
      }
      // Create the autocomplete object, restricting the search to geographical
      // location types.
      autocomplete = new google.maps.places.Autocomplete(
      /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
      { types: ['geocode'] });
      // When the user selects an address from the dropdown, populate the address
      // fields in the form.
      autocomplete.bindTo('bounds', map)
      google.maps.event.addListener(autocomplete, 'place_changed', function () {
      var place = autocomplete.getPlace();
      alert("Location = " + place.name)
      alert("Latitude = " + place.geometry.location.lat())
      alert("Longitude = " + place.geometry.location.lng())
      });
      }
      function apply_direction_service(sourcelatlong, destlatlong) {
      var service = new google.maps.DistanceMatrixService;
      var middle = "";
      directionsService.route({
      origin: sourcelatlong,
      destination: destlatlong,
      travelMode: google.maps.DirectionsTravelMode.DRIVING
      }, function (response, status) {
      if (status === 'OK') {
      if (latlongarray.length < 3) {
      directionsDisplay.setDirections(response);
      }
      var m = Math.ceil((response.routes[0].overview_path.length) / 2)
      middle = response.routes[0].overview_path[m]
      apply_direction_matrix(middle, sourcelatlong, destlatlong)
      }
      else {
      window.alert('Direction request failed due to ' + status);
      }
      });
      }
      function apply_direction_matrix(middle, sourcelatlong, destlatlong) {
      var service = new google.maps.DistanceMatrixService;
      service.getDistanceMatrix({
      origins: [sourcelatlong],
      destinations: [destlatlong],
      travelMode: 'DRIVING',
      unitSystem: google.maps.UnitSystem.IMPERIAL
      }, function (response, status) {
      console.log(response)
      if (status === 'OK') {
      var originlist = response.originAddresses;
      var destinationllist = response.destinationAddresses;
      for (var i = 0; i < originlist.length; i++) {
      var results = response.rows[i].elements;
      for (var j = 0 ; j < results.length; j++) {
      var element = results[j]
      var dt = element.distance.text;
      var dr = element.duration.text;
      }
      }
      displayinfowindow(middle, dt, dr)
      } else {
      window.alert('Distance matrix request failed due to ' + status);
      }
      });
      }
      function display_marker(latlong, index) {
      var contentString = '<div id="content">' +
      '<div id="siteNotice"><h2>Meeting Content</h2>' +
      '</div>' +
      '</div>';
      var infowindow = new google.maps.InfoWindow({
      content: contentString
      });
      var marker = new google.maps.Marker({
      position: latlong,
      map: map,
      title: 'Meeting',
      label: "" + index + ""
      });
      marker.addListener('click', function () {
      infowindow.open(map, marker);
      });
      }
      function displayinfowindow(latlong, dt, dr) {
      //debugger
      // console.log(latlong)
      var content = '<div><i class="fa fa-car" aria-hidden="true" style="margin-right:3px;"></i>' + dt +
      '<br>' + dr +
      '</div>';
      var infowindow1 = new google.maps.InfoWindow({
      content: content
      });
      //infowindow1.setContent(content)
      infowindow1.setPosition(latlong)
      infowindow1.open(map)
      }
      function geolocate() {
      if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function (position) {
      var geolocation = {
      lat: position.coords.latitude,
      lng: position.coords.longitude
      };
      var circle = new google.maps.Circle({
      center: geolocation,
      radius: position.coords.accuracy
      });
      autocomplete.setBounds(circle.getBounds());
      });
      }
      }
    script(async='', defer='', src='https://maps.googleapis.com/maps/api/js?key=AIzaSyDPBj4ylbh-9S0934uz395F1OS_4sXREvo&libraries=places&callback=initMap')
